name: Lighthouse

on:
  workflow_dispatch: 

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate URLs
        id: urls
        uses: actions/github-script@v6
        env:
          COMMUNITIES_URL: ${{ secrets.COMMUNITIES_URL }}
        with:
          script: |
            const { COMMUNITIES_URL } = process.env
            const response = await fetch(COMMUNITIES_URL);
            const data = await response.json();
            const urls = data.join('\n');
            core.setOutput('urls', urls);

      - name: Run Lighthouse on urls and upload data to private lhci server
        id: LHCIAction
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ steps.urls.outputs.urls }}
          serverBaseUrl: ${{ secrets.LHCI_SERVER_URL }}
          serverToken: ${{ secrets.LHCI_SERVER_TOKEN }}
          basicAuthUsername: ${{ secrets.LHCI_SERVER_BASIC_AUTH_USERNAME }}
          basicAuthPassword: ${{ secrets.LHCI_SERVER_BASIC_AUTH_PASSWORD }}

      - name: Parse output
        id: parsedOutput
        uses: actions/github-script@v6
        with:
          script: |
            const manifest = ${{ steps.LHCIAction.outputs.manifest }}
            function median(numbers) {
              return numbers.slice().sort((a, b) => a - b)[Math.floor(numbers.length / 2)];
            }
            function avg(numbers) {
              return numbers.slice().reduce((p, c) => p + c, 0) / numbers.length;
            }
            function build(manifest, attr) {
              let data = manifest.reduce(
                (p, c) => {
                  if (c.summary[attr] >= p.best_score) {
                    p.best_score = c.summary[attr];
                    p.best_site = c.url;
                  }
                  if (c.summary[attr] <= p.worst_score) {
                    p.worst_score = c.summary[attr];
                    p.worst_site = c.url;
                  }
                  p.scores.push(c.summary[attr]);
                  return p;
                },
                {
                  best_site: undefined,
                  best_score: 0,
                  worst_site: undefined,
                  worst_score: 1,
                  scores: [],
                }
              );
              data.median = median(data.scores);
              data.avg = avg(data.scores);
              delete data.scores
              return data;
            }
            const stats = build(manifest, 'performance');
            core.setOutput('manifest', JSON.stringify(stats,null,2));

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:      
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          slack-message: "Lighthouse results: ${{ steps.parsedOutput.outputs.manifest }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}