import { anonymizeMessagesMentions } from '@/utilities/anonymizeMessages';
import { NextApiRequest, NextApiResponse } from 'next/types';
import prisma from '../../client';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const query = req.query.query as string;
  const accountId = req.query.account_id as string;

  const account = await prisma.accounts.findUnique({
    where: { id: accountId },
    select: { anonymizeUsers: true },
  });

  const response = await prisma.messages
    .findMany({
      where: {
        body: {
          search: query.split(' ').join(' & '),
        },
        channel: {
          accountId: accountId,
        },
      },
      include: {
        slackThreads: true,
        mentions: {
          include: {
            users: true,
          },
        },
      },
      take: 20,
    })
    .then((messages) => {
      if (!!account?.anonymizeUsers) {
        return anonymizeMessagesMentions(messages);
      } else {
        return messages;
      }
    });

  res.status(200).json(response);
}

//generated by taking matches and passing it in to json to typescript
export interface Match {
  iid: string;
  team: string;
  score: number;
  channel: Channel;
  type: string;
  user: string;
  username: string;
  ts: string;
  blocks: Block[];
  text: string;
  permalink: string;
  no_reactions?: boolean;
  attachments?: Attachment[];
}

export interface Channel {
  id: string;
  is_channel: boolean;
  is_group: boolean;
  is_im: boolean;
  name: string;
  is_shared: boolean;
  is_org_shared: boolean;
  is_ext_shared: boolean;
  is_private: boolean;
  is_mpim: boolean;
  pending_shared: any[];
  is_pending_ext_shared: boolean;
}

export interface Block {
  type: string;
  block_id: string;
  elements: Element[];
}

export interface Element {
  type: string;
  elements: Element2[];
  style?: string;
  indent?: number;
}

export interface Element2 {
  type: string;
  text?: string;
  range?: string;
  style?: Style;
  name?: string;
  elements?: Element3[];
  url?: string;
  user_id?: string;
}

export interface Style {
  code?: boolean;
  bold?: boolean;
}

export interface Element3 {
  type: string;
  text?: string;
  url?: string;
  style?: Style2;
  name?: string;
  user_id?: string;
}

export interface Style2 {
  bold?: boolean;
  italic?: boolean;
  code?: boolean;
}

export interface Attachment {
  text?: string;
  title: string;
  footer?: string;
  id: number;
  footer_icon?: string;
  ts?: number;
  color?: string;
  fields?: Field[];
  mrkdwn_in?: string[];
  fallback: string;
  bot_id?: string;
  app_unfurl_url?: string;
  is_app_unfurl?: boolean;
  app_id?: string;
  image_url?: string;
  image_width?: number;
  image_height?: number;
  image_bytes?: number;
  from_url?: string;
  service_name?: string;
  service_icon?: string;
  title_link?: string;
  original_url?: string;
}

export interface Field {
  title: string;
  value: string;
  short: boolean;
}
