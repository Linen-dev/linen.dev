// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model messages {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  body      String
  sentAt    DateTime

  channel   channels @relation(fields: [channelId], references: [id])
  channelId String

  slackThreads slackThreads? @relation(fields: [slackThreadId], references: [id])

  slackThreadId String?

  author  users?  @relation(fields: [usersId], references: [id])
  usersId String?
  @@unique([body, sentAt])
}

model slackThreads {
  id            String   @id @default(uuid())
  channel       channels @relation(fields: [channelId], references: [id])
  slackThreadTs String

  messages  messages[]
  channelId String

  @@unique([slackThreadTs])
}

model channels {
  id             String     @id @default(uuid())
  channelName    String
  messages       messages[]
  slackChannelId String

  slackThreads slackThreads[]
  account      accounts?      @relation(fields: [accountId], references: [id])
  accountId    String?

  @@unique([slackChannelId])
}

model accounts {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now())
  name           String
  channels       channels[]
  slackTeamId    String
  redirectDomain String?
  slackUrl       String?

  users               users[]
  slackAuthorizations slackAuthorizations[]
  @@unique([slackTeamId])
}

model users {
  id              String     @id @default(uuid())
  messages        messages[]
  slackUserId     String
  displayName     String?
  profileImageUrl String?
  isBot           Boolean
  isAdmin         Boolean

  account    accounts @relation(fields: [accountsId], references: [id])
  accountsId String

  @@unique([slackUserId])
}

model slackAuthorizations {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  accessToken String
  botUserId   String
  scope       String

  // accountsId String
  account    accounts? @relation(fields: [accountsId], references: [id])
  accountsId String?
}
