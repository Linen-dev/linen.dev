// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions", "extendedIndexes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model messages {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  body      String
  sentAt    DateTime

  channel           channels @relation(fields: [channelId], references: [id])
  channelId         String
  externalMessageId String?

  threads threads? @relation(fields: [threadId], references: [id])

  threadId String?

  mentions                 mentions[]
  attachments              messageAttachments[]
  reactions                messageReactions[]
  author                   users?                   @relation(fields: [usersId], references: [id])
  usersId                  String?
  textsearchable_index_col Unsupported("tsvector")?
  messageFormat            MessageFormat?
  notifications            notifications[]

  @@unique([channelId, externalMessageId])
  @@index([textsearchable_index_col], type: Gin)
  @@index([threadId])
  @@index([usersId])
}

enum MessageFormat {
  DISCORD
  SLACK
  LINEN
}

model threads {
  id                  String      @id @default(uuid())
  incrementId         Int         @default(autoincrement())
  channel             channels    @relation(fields: [channelId], references: [id])
  externalThreadId    String?
  viewCount           Int         @default(0)
  slug                String?
  messageCount        Int         @default(1)
  sentAt              BigInt
  hidden              Boolean     @default(false)
  title               String?
  state               ThreadState @default(OPEN)
  pinned              Boolean     @default(false)
  messages            messages[]
  channelId           String
  lastReplyAt         BigInt?
  closeAt             BigInt?
  firstUserReplyAt    BigInt?
  firstManagerReplyAt BigInt?
  userThreadStatus    userThreadStatus[]

  notifications notifications[]
  page          Int?

  @@unique([externalThreadId])
  @@unique([incrementId])
  @@index([channelId])
  @@index([channelId, sentAt])
  @@index([channelId, sentAt, hidden])
  @@index([channelId, hidden, state, lastReplyAt])
  @@index([channelId, page])
}

enum ThreadState {
  OPEN
  CLOSE
}

model channels {
  id                String     @id @default(uuid())
  channelName       String
  messages          messages[]
  externalChannelId String?

  threads            threads[]
  //We should make channel required for channel
  account            accounts?     @relation(fields: [accountId], references: [id])
  accountId          String?
  hidden             Boolean       @default(false)
  default            Boolean       @default(false)
  externalPageCursor String?
  memberships        memberships[]
  readStatus         readStatus[]

  notifications       notifications[]
  pages               Int?
  lastPageBuildAt     BigInt?
  channelsIntegration channelsIntegration[]

  @@unique([externalChannelId])
  @@index([accountId])
}

model channelsIntegration {
  id              String                  @id @default(uuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime?               @updatedAt
  channel         channels                @relation(fields: [channelId], references: [id])
  channelId       String
  type            channelsIntegrationType
  externalId      String
  data            Json?
  createdBy       users                   @relation("createdBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  updatedBy       users?                  @relation("updatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?

  @@index([externalId])
}

enum channelsIntegrationType {
  GITHUB
  EMAIL
}

model accounts {
  id                     String      @id @default(uuid())
  createdAt              DateTime    @default(now())
  type                   AccountType @default(PUBLIC)
  name                   String?
  description            String?
  slackDomain            String?
  discordDomain          String?
  discordServerId        String?
  channels               channels[]
  slackTeamId            String?
  communityInviteUrl     String?
  redirectDomain         String?
  communityUrl           String?
  syncStatus             String      @default("NOT_STARTED")
  brandColor             String?
  homeUrl                String?
  docsUrl                String?
  logoUrl                String?
  logoSquareUrl          String?
  premium                Boolean     @default(false)
  googleAnalyticsId      String?
  googleSiteVerification String?
  anonymizeUsers         Boolean     @default(false)

  auths                 auths[]
  users                 users[]
  slackAuthorizations   slackAuthorizations[]
  discordAuthorizations discordAuthorizations[]
  invites               invites[]
  chat                  ChatType                @default(MANAGERS)
  integration           AccountIntegration      @default(NONE)
  apiKeys               apiKeys[]
  notifications         notifications[]

  @@unique([redirectDomain])
  @@unique([slackDomain])
}

enum AccountType {
  PUBLIC
  PRIVATE
}

enum AccountIntegration {
  NONE
  SLACK
  DISCORD
}

enum ChatType {
  NONE
  MANAGERS
  MEMBERS
}

model auths {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  email         String
  emailVerified DateTime?
  password      String
  salt          String
  token         String?

  account    accounts?    @relation(fields: [accountId], references: [id])
  accountId  String?
  users      users[]
  session    session[]
  readStatus readStatus[]

  notifications        notifications[] @relation("user")
  notificationsAuthor  notifications[] @relation("author")
  notificationsByEmail Boolean         @default(true)

  @@unique([email])
}

model memberships {
  user    users    @relation(fields: [usersId], references: [id])
  channel channels @relation(fields: [channelsId], references: [id])

  usersId    String
  channelsId String

  @@unique([usersId, channelsId])
  @@index([usersId])
  @@index([channelsId])
}

model users {
  id              String     @id @default(uuid())
  messages        messages[]
  externalUserId  String?
  displayName     String?
  profileImageUrl String?
  isBot           Boolean
  isAdmin         Boolean
  mentions        mentions[]
  anonymousAlias  String?

  account    accounts @relation(fields: [accountsId], references: [id])
  accountsId String

  auth                       auths?                @relation(fields: [authsId], references: [id])
  authsId                    String?
  memberships                memberships[]
  invites                    invites[]
  role                       Roles                 @default(MEMBER)
  channelsIntegrationCreated channelsIntegration[] @relation("createdBy")
  channelsIntegrationUpdated channelsIntegration[] @relation("updatedBy")

  userThreadStatus    userThreadStatus[]

  @@unique([externalUserId, accountsId])
  @@index([authsId])
}

enum Roles {
  OWNER
  ADMIN
  MEMBER
}

model mentions {
  messages   messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  messagesId String
  users      users?    @relation(fields: [usersId], references: [id])
  usersId    String

  @@id([messagesId, usersId])
  @@index([messagesId])
  @@index([usersId])
}

model messageAttachments {
  id          String?   @default(uuid())
  messages    messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  messagesId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //We need to change this to generate it's own id
  externalId  String
  name        String
  sourceUrl   String
  title       String?
  mimetype    String?
  internalUrl String?
  permalink   String?

  @@id([messagesId, externalId])
  @@index([messagesId])
}

model messageReactions {
  messages   messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  //We need to generate our own id here
  messagesId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  count      Int?
  users      Json?

  @@id([messagesId, name])
  @@index([messagesId])
}

model slackAuthorizations {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  accessToken     String
  botUserId       String
  scope           String
  userScope       String?
  authedUserId    String?
  userAccessToken String?

  account    accounts? @relation(fields: [accountsId], references: [id])
  accountsId String?
}

model discordAuthorizations {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  accessToken  String
  scope        String
  refreshToken String?
  expiresAt    DateTime?
  customBot    Boolean   @default(false)

  account accounts? @relation(fields: [accountsId], references: [id])

  accountsId String?
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         auths    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model invites {
  id         String    @id @default(uuid())
  email      String
  accountsId String
  status     String    @default("PENDING")
  accounts   accounts? @relation(fields: [accountsId], references: [id])

  createdById String
  createdBy   users? @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles    @default(MEMBER)

  @@unique([email, accountsId])
}

model readStatus {
  authId     String
  auth       auths    @relation(fields: [authId], references: [id], onDelete: Cascade)
  channelId  String
  channel    channels @relation(fields: [channelId], references: [id], onDelete: Cascade)
  lastReadAt BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([authId, channelId])
}

model userThreadStatus {
  userId    String
  user      users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String
  thread    threads @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  muted     Boolean
  read      Boolean

  @@id([userId, threadId])
}

enum notificationType {
  MENTION
  THREAD
  CHANNEL
}

model notifications {
  id               String           @id @default(uuid())
  authId           String
  communityId      String
  notificationType notificationType
  channelId        String
  threadId         String?
  messageId        String?
  authorId         String

  auth      auths     @relation("user", fields: [authId], references: [id], onDelete: Cascade)
  community accounts  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  channel   channels  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  thread    threads?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  message   messages? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  author    auths     @relation("author", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model apiKeys {
  id        String   @id @default(uuid())
  accountId String
  account   accounts @relation(fields: [accountId], references: [id])
  name      String
  hash      String
  scope     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hash])
  @@index([accountId])
}
